launchSnakeGame = function (windowId, isMaster) {
	//Canvas stuff
	var data = {"masterPosition": infos.position};
    	var canvas = createCanvas(windowId, "SNAKE", 400, 300, "game", isMaster, false, data);
    	var w = canvas.width;
    	var h = canvas.height;
    	var ctx = canvas.getContext("2d");
    	if (isMaster) {
        	shareMediaDisplay(windowId, "snake", "SNAKE", false, data);
    	}
		/*Inutile car elle permet dupliquer la fenetre avec un autre joueur.
		Dans le snake c'est inutile. 	
		*/

	var cw1 = 10;
	var d1 = "right";
	var food1 = {};
	var score1 = 0;
	var snake_array1 = [];
 

	
	//Lets save the cell width in a variable for easy control
var game = {

//	 cw : 10,
//	 d : "",
//	 food : {},
//	 score :0,
	
	cw : cw1,
	d : d1,
	food : food1,
	score : score1,
	
	//Lets create the snake now
//	snake_array : [], //an array of cells to make up the snake
	snake_array : snake_array1,

	init : function( ){
		console.log("init()");
		this.d = "right"; //default direction
		this.create_snake();
		this.create_food(); //Now we can see the food particle
		console.log("init() CW "+this.cw);
//		TEST
//		this.cw = 5;
//		console.log("init() CW2 "+this.cw);
//		//finally lets display the score
		this.score = 0;
		score1 = this.score;
		//Lets move the snake now using a timer which will trigger the paint function
		//every 60ms
		if(typeof game_loop != "undefined") clearInterval(game_loop);
//		game_loop = setInterval(this.paint, 60);
		game_loop  = setTimeout(this.paint, 1000);
	},

//	init(),
	
	
	create_snake : function ()
	{
		console.log("create_snake()");
		var length = 5; //Length of the snake
		this.snake_array = []; //Empty array to start with
		for(var i = length-1; i>=0; i--)
		{
			//This will create a horizontal snake starting from the top left
			this.snake_array.push({x: i, y:0});
			snake_array1 = this.snake_array,
			console.log(this.snake_array[0].x);
			console.log(this.snake_array);
		}
	},
	
	//Lets create the food now
	create_food :function ()
	{
		console.log("this.cw create_food "+this.cw);
		this.food = {
			x: Math.round(Math.random()*(w-this.cw)/this.cw), 
			y: Math.round(Math.random()*(h-this.cw)/this.cw), 
		};
		food1 = this.food;
		//This will create a cell with x/y between 0-44
		//Because there are 45(450/10) positions accross the rows and columns
	},
	
	//Lets paint the snake now
	paint : function ()
	{
		console.log("paint()");
		//To avoid the snake trail we need to paint the BG on every frame
		//Lets paint the canvas now
		ctx.fillStyle = "white";
		ctx.fillRect(0, 0, w, h);
		ctx.strokeStyle = "black";
		ctx.strokeRect(0, 0, w, h);
		
		//The movement code for the snake to come here.
		//The logic is simple
		//Pop out the tail cell and place it infront of the head cell
		
		console.log("this.cw paint "+this.cw);
		console.log("cw1 paint "+cw1);

		console.log(this.snake_array[0].x);

		var nx = this.snake_array[0].x;
		var ny = this.snake_array[0].y;
		//These were the position of the head cell.
		//We will increment it to get the new head position
		//Lets add proper direction based movement now
		if(this.d == "right") nx++;
		else if(this.d == "left") nx--;
		else if(this.d == "up") ny--;
		else if(this.d == "down") ny++;
		
		//Lets add the game over clauses now
		//This will restart the game if the snake hits the wall
		//Lets add the code for body collision
		//Now if the head of the snake bumps into its body, the game will restart
		if(nx == -1 || nx == w/this.cw || ny == -1 || ny == h/this.cw || this.check_collision(nx, ny, this.snake_array))
		{
			//restart game
			init();
			//Lets organize the code a bit now.
			return;
		}
		
		//Lets write the code to make the snake eat the food
		//The logic is simple
		//If the new head position matches with that of the food,
		//Create a new head instead of moving the tail
		if(nx == this.food.x && ny == this.food.y)
		{
			var tail = {x: nx, y: ny};
			this.score++;
			score1 = this.score;
			//Create new food
			create_food();
		}
		else
		{
			var tail = this.snake_array.pop(); //pops out the last cell
			tail.x = nx; tail.y = ny;
		}
		//The snake can now eat the food.
		
		this.snake_array.unshift(tail); //puts back the tail as the first cell
		snake_array1 = this.snake_array;
		
		for(var i = 0; i < this.snake_array.length; i++)
		{
			var c = this.snake_array[i];
			//Lets paint 10px wide cells
			this.paint_cell(c.x, c.y);
		}
		
		//Lets paint the food
		paint_cell(this.food.x, this.food.y);
		//Lets paint the score
		var score_text = "Score: " + this.score;
		ctx.fillText(score_text, 5, h-5);
	},
	
	//Lets first create a generic function to paint cells
	paint_cell : function (x, y)
	{
		ctx.fillStyle = "blue";
		ctx.fillRect(x*this.cw, y*this.cw, this.cw, this.cw);
		ctx.strokeStyle = "white";
		ctx.strokeRect(x*this.cw, y*this.cw, this.cw, this.cw);
	},
	
	check_collision : function (x, y, array)
	{
		//This function will check if the provided x/y coordinates exist
		//in an array of cells or not
		for(var i = 0; i < array.length; i++)
		{
			if(array[i].x == x && array[i].y == y)
			 return true;
		}
		return false;
	},
	
//tal,//	//Lets add the keyboard controls now
//	$(document).keydown(function(e){
//		var key = e.which;
//		//We will add another clause to prevent reverse gear
//		if(key == "37" && d != "right") d = "left";
//		else if(key == "38" && d != "down") d = "up";
//		else if(key == "39" && d != "left") d = "right";
//		else if(key == "40" && d != "up") d = "down";
//		//The snake is now keyboard controllable
//	})

	
	//ligne 296 PINGPONG
	launchFullScreen: function () {
            fullWindowPingPong();
   }
}
game.init();


function fullWindowPingPong() {
        console.log("FULLSCREEN BITCH");
    }


}
